A = A_temp)
# Number of generations
Time <- n_generation
# A matrix to store the outputs
out_mat <- matrix(c(c(0:Time), rep(0, N*(Time+1))), (Time+1), N+1, byrow = F)
colnames(out_mat) <- c("Time", paste("N", c(1:N), sep = ""))
# Initial abundance
out_mat[1, 2:(N+1)] <- rep(10, N)
# Model outputs
out_mat <- BevertonHolt(out_mat, parms_temp)
# Relative abundance of N2 in the last generation
out_mat[Time, N+1]/sum(out_mat[Time, 2:(N+1)])
})
### 2. Sensitivity of g & lambda
g_lambda_sens <- sapply(1:n_sim, function(x){
# New parameters
g_temp <- c(g[1], g[2]*(1 + pchange_focal_par/100))
s_temp <- c(s[1], s[2]*(1 + runif(n = 1, min = -pchange_nonfocal_par, max = pchange_nonfocal_par)/100))
lambda_temp <- c(lambda[1], lambda[2]*(1 + pchange_focal_par/100))
A_temp <- matrix(c(A[1, 1], A[1, 2],
A[2, 1]*(1 + runif(n = 1, min = -pchange_nonfocal_par, max = pchange_nonfocal_par)/100),
A[2, 2]*(1 + runif(n = 1, min = -pchange_nonfocal_par, max = pchange_nonfocal_par)/100)),
N, N, byrow = TRUE)
parms_temp <- list(N = N,
g = g_temp,
s = s_temp,
lambda = lambda_temp,
A = A_temp)
# Number of generations
Time <- n_generation
# A matrix to store the outputs
out_mat <- matrix(c(c(0:Time), rep(0, N*(Time+1))), (Time+1), N+1, byrow = F)
colnames(out_mat) <- c("Time", paste("N", c(1:N), sep = ""))
# Initial abundance
out_mat[1, 2:(N+1)] <- rep(10, N)
# Model outputs
out_mat <- BevertonHolt(out_mat, parms_temp)
# Relative abundance of N2 in the last generation
out_mat[Time, N+1]/sum(out_mat[Time, 2:(N+1)])
})
### 3. Sensitivity of g & A_21
g_A_21_sens <- sapply(1:n_sim, function(x){
# New parameters
g_temp <- c(g[1], g[2]*(1 + pchange_focal_par/100))
s_temp <- c(s[1], s[2]*(1 + runif(n = 1, min = -pchange_nonfocal_par, max = pchange_nonfocal_par)/100))
lambda_temp <- c(lambda[1], lambda[2]*(1 + runif(n = 1, min = -pchange_nonfocal_par, max = pchange_nonfocal_par)/100))
A_temp <- matrix(c(A[1, 1], A[1, 2],
A[2, 1]*(1 + pchange_focal_par/100),
A[2, 2]*(1 + runif(n = 1, min = -pchange_nonfocal_par, max = pchange_nonfocal_par)/100)),
N, N, byrow = TRUE)
parms_temp <- list(N = N,
g = g_temp,
s = s_temp,
lambda = lambda_temp,
A = A_temp)
# Number of generations
Time <- n_generation
# A matrix to store the outputs
out_mat <- matrix(c(c(0:Time), rep(0, N*(Time+1))), (Time+1), N+1, byrow = F)
colnames(out_mat) <- c("Time", paste("N", c(1:N), sep = ""))
# Initial abundance
out_mat[1, 2:(N+1)] <- rep(10, N)
# Model outputs
out_mat <- BevertonHolt(out_mat, parms_temp)
# Relative abundance of N2 in the last generation
out_mat[Time, N+1]/sum(out_mat[Time, 2:(N+1)])
})
### 4. Sensitivity of g & A_22
g_A_22_sens <- sapply(1:n_sim, function(x){
# New parameters
g_temp <- c(g[1], g[2]*(1 + pchange_focal_par/100))
s_temp <- c(s[1], s[2]*(1 + runif(n = 1, min = -pchange_nonfocal_par, max = pchange_nonfocal_par)/100))
lambda_temp <- c(lambda[1], lambda[2]*(1 + runif(n = 1, min = -pchange_nonfocal_par, max = pchange_nonfocal_par)/100))
A_temp <- matrix(c(A[1, 1], A[1, 2],
A[2, 1]*(1 + runif(n = 1, min = -pchange_nonfocal_par, max = pchange_nonfocal_par)/100),
A[2, 2]*(1 + pchange_focal_par/100)),
N, N, byrow = TRUE)
parms_temp <- list(N = N,
g = g_temp,
s = s_temp,
lambda = lambda_temp,
A = A_temp)
# Number of generations
Time <- n_generation
# A matrix to store the outputs
out_mat <- matrix(c(c(0:Time), rep(0, N*(Time+1))), (Time+1), N+1, byrow = F)
colnames(out_mat) <- c("Time", paste("N", c(1:N), sep = ""))
# Initial abundance
out_mat[1, 2:(N+1)] <- rep(10, N)
# Model outputs
out_mat <- BevertonHolt(out_mat, parms_temp)
# Relative abundance of N2 in the last generation
out_mat[Time, N+1]/sum(out_mat[Time, 2:(N+1)])
})
### 5. Sensitivity of s & lambda
s_lambda_sens <- sapply(1:n_sim, function(x){
# New parameters
g_temp <- c(g[1], g[2]*(1 + runif(n = 1, min = -pchange_nonfocal_par, max = pchange_nonfocal_par)/100))
s_temp <- c(s[1], s[2]*(1 + pchange_focal_par/100))
lambda_temp <- c(lambda[1], lambda[2]*(1 + pchange_focal_par/100))
A_temp <- matrix(c(A[1, 1], A[1, 2],
A[2, 1]*(1 + runif(n = 1, min = -pchange_nonfocal_par, max = pchange_nonfocal_par)/100),
A[2, 2]*(1 + runif(n = 1, min = -pchange_nonfocal_par, max = pchange_nonfocal_par)/100)),
N, N, byrow = TRUE)
parms_temp <- list(N = N,
g = g_temp,
s = s_temp,
lambda = lambda_temp,
A = A_temp)
# Number of generations
Time <- n_generation
# A matrix to store the outputs
out_mat <- matrix(c(c(0:Time), rep(0, N*(Time+1))), (Time+1), N+1, byrow = F)
colnames(out_mat) <- c("Time", paste("N", c(1:N), sep = ""))
# Initial abundance
out_mat[1, 2:(N+1)] <- rep(10, N)
# Model outputs
out_mat <- BevertonHolt(out_mat, parms_temp)
# Relative abundance of N2 in the last generation
out_mat[Time, N+1]/sum(out_mat[Time, 2:(N+1)])
})
### 6. Sensitivity of s & A_21
s_A_21_sens <- sapply(1:n_sim, function(x){
# New parameters
g_temp <- c(g[1], g[2]*(1 + runif(n = 1, min = -pchange_nonfocal_par, max = pchange_nonfocal_par)/100))
s_temp <- c(s[1], s[2]*(1 + pchange_focal_par/100))
lambda_temp <- c(lambda[1], lambda[2]*(1 + runif(n = 1, min = -pchange_nonfocal_par, max = pchange_nonfocal_par)/100))
A_temp <- matrix(c(A[1, 1], A[1, 2],
A[2, 1]*(1 + pchange_focal_par/100),
A[2, 2]*(1 + runif(n = 1, min = -pchange_nonfocal_par, max = pchange_nonfocal_par)/100)),
N, N, byrow = TRUE)
parms_temp <- list(N = N,
g = g_temp,
s = s_temp,
lambda = lambda_temp,
A = A_temp)
# Number of generations
Time <- n_generation
# A matrix to store the outputs
out_mat <- matrix(c(c(0:Time), rep(0, N*(Time+1))), (Time+1), N+1, byrow = F)
colnames(out_mat) <- c("Time", paste("N", c(1:N), sep = ""))
# Initial abundance
out_mat[1, 2:(N+1)] <- rep(10, N)
# Model outputs
out_mat <- BevertonHolt(out_mat, parms_temp)
# Relative abundance of N2 in the last generation
out_mat[Time, N+1]/sum(out_mat[Time, 2:(N+1)])
})
### 7. Sensitivity of s & A_22
s_A_22_sens <- sapply(1:n_sim, function(x){
# New parameters
g_temp <- c(g[1], g[2]*(1 + runif(n = 1, min = -pchange_nonfocal_par, max = pchange_nonfocal_par)/100))
s_temp <- c(s[1], s[2]*(1 + pchange_focal_par/100))
lambda_temp <- c(lambda[1], lambda[2]*(1 + runif(n = 1, min = -pchange_nonfocal_par, max = pchange_nonfocal_par)/100))
A_temp <- matrix(c(A[1, 1], A[1, 2],
A[2, 1]*(1 + runif(n = 1, min = -pchange_nonfocal_par, max = pchange_nonfocal_par)/100),
A[2, 2]*(1 + pchange_focal_par/100)),
N, N, byrow = TRUE)
parms_temp <- list(N = N,
g = g_temp,
s = s_temp,
lambda = lambda_temp,
A = A_temp)
# Number of generations
Time <- n_generation
# A matrix to store the outputs
out_mat <- matrix(c(c(0:Time), rep(0, N*(Time+1))), (Time+1), N+1, byrow = F)
colnames(out_mat) <- c("Time", paste("N", c(1:N), sep = ""))
# Initial abundance
out_mat[1, 2:(N+1)] <- rep(10, N)
# Model outputs
out_mat <- BevertonHolt(out_mat, parms_temp)
# Relative abundance of N2 in the last generation
out_mat[Time, N+1]/sum(out_mat[Time, 2:(N+1)])
})
### 8. Sensitivity of lambda & A_21
lambda_A_21_sens <- sapply(1:n_sim, function(x){
# New parameters
g_temp <- c(g[1], g[2]*(1 + runif(n = 1, min = -pchange_nonfocal_par, max = pchange_nonfocal_par)/100))
s_temp <- c(s[1], s[2]*(1 + runif(n = 1, min = -pchange_nonfocal_par, max = pchange_nonfocal_par)/100))
lambda_temp <- c(lambda[1], lambda[2]*(1 + pchange_focal_par/100))
A_temp <- matrix(c(A[1, 1], A[1, 2],
A[2, 1]*(1 + pchange_focal_par/100),
A[2, 2]*(1 + runif(n = 1, min = -pchange_nonfocal_par, max = pchange_nonfocal_par)/100)),
N, N, byrow = TRUE)
parms_temp <- list(N = N,
g = g_temp,
s = s_temp,
lambda = lambda_temp,
A = A_temp)
# Number of generations
Time <- n_generation
# A matrix to store the outputs
out_mat <- matrix(c(c(0:Time), rep(0, N*(Time+1))), (Time+1), N+1, byrow = F)
colnames(out_mat) <- c("Time", paste("N", c(1:N), sep = ""))
# Initial abundance
out_mat[1, 2:(N+1)] <- rep(10, N)
# Model outputs
out_mat <- BevertonHolt(out_mat, parms_temp)
# Relative abundance of N2 in the last generation
out_mat[Time, N+1]/sum(out_mat[Time, 2:(N+1)])
})
### 9. Sensitivity of lambda & A_22
lambda_A_22_sens <- sapply(1:n_sim, function(x){
# New parameters
g_temp <- c(g[1], g[2]*(1 + runif(n = 1, min = -pchange_nonfocal_par, max = pchange_nonfocal_par)/100))
s_temp <- c(s[1], s[2]*(1 + runif(n = 1, min = -pchange_nonfocal_par, max = pchange_nonfocal_par)/100))
lambda_temp <- c(lambda[1], lambda[2]*(1 + pchange_focal_par/100))
A_temp <- matrix(c(A[1, 1], A[1, 2],
A[2, 1]*(1 + runif(n = 1, min = -pchange_nonfocal_par, max = pchange_nonfocal_par)/100),
A[2, 2]*(1 + pchange_focal_par/100)),
N, N, byrow = TRUE)
parms_temp <- list(N = N,
g = g_temp,
s = s_temp,
lambda = lambda_temp,
A = A_temp)
# Number of generations
Time <- n_generation
# A matrix to store the outputs
out_mat <- matrix(c(c(0:Time), rep(0, N*(Time+1))), (Time+1), N+1, byrow = F)
colnames(out_mat) <- c("Time", paste("N", c(1:N), sep = ""))
# Initial abundance
out_mat[1, 2:(N+1)] <- rep(10, N)
# Model outputs
out_mat <- BevertonHolt(out_mat, parms_temp)
# Relative abundance of N2 in the last generation
out_mat[Time, N+1]/sum(out_mat[Time, 2:(N+1)])
})
### 10. Sensitivity of A_21 & A_22
A_21_A_22_sens <- sapply(1:n_sim, function(x){
# New parameters
g_temp <- c(g[1], g[2]*(1 + runif(n = 1, min = -pchange_nonfocal_par, max = pchange_nonfocal_par)/100))
s_temp <- c(s[1], s[2]*(1 + runif(n = 1, min = -pchange_nonfocal_par, max = pchange_nonfocal_par)/100))
lambda_temp <- c(lambda[1], lambda[2]*(1 + runif(n = 1, min = -pchange_nonfocal_par, max = pchange_nonfocal_par)/100))
A_temp <- matrix(c(A[1, 1], A[1, 2],
A[2, 1]*(1 + pchange_focal_par/100),
A[2, 2]*(1 + pchange_focal_par/100)),
N, N, byrow = TRUE)
parms_temp <- list(N = N,
g = g_temp,
s = s_temp,
lambda = lambda_temp,
A = A_temp)
# Number of generations
Time <- n_generation
# A matrix to store the outputs
out_mat <- matrix(c(c(0:Time), rep(0, N*(Time+1))), (Time+1), N+1, byrow = F)
colnames(out_mat) <- c("Time", paste("N", c(1:N), sep = ""))
# Initial abundance
out_mat[1, 2:(N+1)] <- rep(10, N)
# Model outputs
out_mat <- BevertonHolt(out_mat, parms_temp)
# Relative abundance of N2 in the last generation
out_mat[Time, N+1]/sum(out_mat[Time, 2:(N+1)])
})
### Combine all the simulation results
pars_sens_df <- data.frame(parameter = rep(c("g_s", "g_lambda", "g_A_21", "g_A_22", "s_lambda",
"s_A_21", "s_A_22", "lambda_A_21", "lambda_A_22", "A_21_A_22"),
each = n_sim),
N2_eql = c(g_s_sens, g_lambda_sens, g_A_21_sens, g_A_22_sens, s_lambda_sens,
s_A_21_sens, s_A_22_sens, lambda_A_21_sens, lambda_A_22_sens, A_21_A_22_sens))
return(list(N2_equl_default = N2_equl_default,
pars_sens_df = pars_sens_df))
}
plot_sim_two_pars_relabd <- function(dat, pchange_focal_par, pchange_nonfocal_par){
# Arrange the parameters by the average N2 abundance of the simulations
pars_order <- dat$pars_sens_df %>%
group_by(parameter) %>%
summarise(mean = mean(N2_eql)) %>%
mutate(No = 1:10) %>%
arrange(desc(mean))
# Reorder the parameter levels for plotting
dat$pars_sens_df <- dat$pars_sens_df %>%
mutate(parameter = factor(parameter, level = pars_order$parameter, ordered = T))
# A vector of x-axis labels
x_labels <- c(expression(italic(alpha[21]~+~alpha[22])),
expression(italic(g~+~alpha[21])),
expression(italic(g~+~alpha[22])),
expression(italic(g~+~lambda)),
expression(italic(g~+~s)),
expression(italic(lambda~+~alpha[21])),
expression(italic(lambda~+~alpha[22])),
expression(italic(s~+~alpha[21])),
expression(italic(s~+~alpha[22])),
expression(italic(s~+~lambda)))
# Plot
ggplot(data = dat$pars_sens_df) +
geom_hline(yintercept = dat$N2_equl_default, color = "grey60", linetype = "dashed", size = 1) +
geom_hline(yintercept = 0, color = "blue", linetype = "dashed", size = 1) +
geom_point(aes(x = parameter, y = N2_eql), position = position_jitter(width = 0.1),
color = "grey50", alpha = 0.75) +
stat_summary(aes(x = parameter, y = N2_eql), fun.y = mean,
fun.ymin = function(x) mean(x) - sd(x),
fun.ymax = function(x) mean(x) + sd(x),
geom = "pointrange", color = "red") +
labs(x = "Focal parameter", y = expression(Relative~abundance~of~N[2]),
title = glue::glue("Focal parameters: +{pchange_focal_par}% \n Non-focal parameters: ±{pchange_nonfocal_par}%")) +
scale_x_discrete(labels = x_labels[pars_order$No]) +
scale_y_continuous(expand = c(0.25, 0)) +
theme_classic() +
theme(axis.line.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text = element_text(color = "black", size = 14),
plot.title = element_text(hjust = 0.5, size = 16),
axis.title.x = element_text(size = 15, margin = margin(t = 10)),
axis.title.y = element_text(size = 15, margin = margin(r = 8)))
}
### Visualize the simulation results
BH_sens_20_5 <- BH_sensitivity_two_pars_relabd(pchange_focal_par = 20,
pchange_nonfocal_par = 5,
n_generation = 100,
n_sim = 100)
BH_sens_40_5 <- BH_sensitivity_two_pars_relabd(pchange_focal_par = 40,
pchange_nonfocal_par = 5,
n_generation = 100,
n_sim = 100)
BH_sens_20_10 <- BH_sensitivity_two_pars_relabd(pchange_focal_par = 20,
pchange_nonfocal_par = 10,
n_generation = 100,
n_sim = 100)
BH_sens_40_20 <- BH_sensitivity_two_pars_relabd(pchange_focal_par = 40,
pchange_nonfocal_par = 20,
n_generation = 100,
n_sim = 100)
plot_sim_two_pars_relabd(dat = BH_sens_20_5,
pchange_focal_par = 20,
pchange_nonfocal_par = 5)
ggsave("./Outputs/two_pars_sens_plot_20_5_relabd.tiff", width = 10, height = 5, dpi = 600, device = "tiff")
plot_sim_two_pars_relabd(dat = BH_sens_40_5,
pchange_focal_par = 40,
pchange_nonfocal_par = 5)
ggsave("./Outputs/two_pars_sens_plot_40_5_relabd.tiff", width = 10, height = 5, dpi = 600, device = "tiff")
plot_sim_two_pars_relabd(dat = BH_sens_20_10,
pchange_focal_par = 20,
pchange_nonfocal_par = 10)
ggsave("./Outputs/two_pars_sens_plot_20_10_relabd.tiff", width = 10, height = 5, dpi = 600, device = "tiff")
plot_sim_two_pars_relabd(dat = BH_sens_40_20,
pchange_focal_par = 40,
pchange_nonfocal_par = 20)
ggsave("./Outputs/two_pars_sens_plot_40_20_relabd.tiff", width = 10, height = 5, dpi = 600, device = "tiff")
plot_sim_two_pars_relabd <- function(dat, pchange_focal_par, pchange_nonfocal_par){
# Arrange the parameters by the average N2 abundance of the simulations
pars_order <- dat$pars_sens_df %>%
group_by(parameter) %>%
summarise(mean = mean(N2_eql)) %>%
mutate(No = 1:10) %>%
arrange(desc(mean))
# Reorder the parameter levels for plotting
dat$pars_sens_df <- dat$pars_sens_df %>%
mutate(parameter = factor(parameter, level = pars_order$parameter, ordered = T))
# A vector of x-axis labels
x_labels <- c(expression(italic(alpha[21]~+~alpha[22])),
expression(italic(g~+~alpha[21])),
expression(italic(g~+~alpha[22])),
expression(italic(g~+~lambda)),
expression(italic(g~+~s)),
expression(italic(lambda~+~alpha[21])),
expression(italic(lambda~+~alpha[22])),
expression(italic(s~+~alpha[21])),
expression(italic(s~+~alpha[22])),
expression(italic(s~+~lambda)))
# Plot
ggplot(data = dat$pars_sens_df) +
geom_hline(yintercept = dat$N2_equl_default, color = "grey60", linetype = "dashed", size = 1) +
geom_hline(yintercept = 0, color = "blue", linetype = "dashed", size = 1) +
geom_hline(yintercept = 1, color = "blue", linetype = "dashed", size = 1) +
geom_point(aes(x = parameter, y = N2_eql), position = position_jitter(width = 0.1),
color = "grey50", alpha = 0.75) +
stat_summary(aes(x = parameter, y = N2_eql), fun.y = mean,
fun.ymin = function(x) mean(x) - sd(x),
fun.ymax = function(x) mean(x) + sd(x),
geom = "pointrange", color = "red") +
labs(x = "Focal parameter", y = expression(Relative~abundance~of~N[2]),
title = glue::glue("Focal parameters: +{pchange_focal_par}% \n Non-focal parameters: ±{pchange_nonfocal_par}%")) +
scale_x_discrete(labels = x_labels[pars_order$No]) +
scale_y_continuous(expand = c(0.25, 0), limits = c(0, 1.1)) +
theme_classic() +
theme(axis.line.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text = element_text(color = "black", size = 14),
plot.title = element_text(hjust = 0.5, size = 16),
axis.title.x = element_text(size = 15, margin = margin(t = 10)),
axis.title.y = element_text(size = 15, margin = margin(r = 8)))
}
plot_sim_two_pars_relabd(dat = BH_sens_40_20,
pchange_focal_par = 40,
pchange_nonfocal_par = 20)
plot_sim_two_pars_relabd <- function(dat, pchange_focal_par, pchange_nonfocal_par){
# Arrange the parameters by the average N2 abundance of the simulations
pars_order <- dat$pars_sens_df %>%
group_by(parameter) %>%
summarise(mean = mean(N2_eql)) %>%
mutate(No = 1:10) %>%
arrange(desc(mean))
# Reorder the parameter levels for plotting
dat$pars_sens_df <- dat$pars_sens_df %>%
mutate(parameter = factor(parameter, level = pars_order$parameter, ordered = T))
# A vector of x-axis labels
x_labels <- c(expression(italic(alpha[21]~+~alpha[22])),
expression(italic(g~+~alpha[21])),
expression(italic(g~+~alpha[22])),
expression(italic(g~+~lambda)),
expression(italic(g~+~s)),
expression(italic(lambda~+~alpha[21])),
expression(italic(lambda~+~alpha[22])),
expression(italic(s~+~alpha[21])),
expression(italic(s~+~alpha[22])),
expression(italic(s~+~lambda)))
# Plot
ggplot(data = dat$pars_sens_df) +
geom_hline(yintercept = dat$N2_equl_default, color = "grey60", linetype = "dashed", size = 1) +
geom_hline(yintercept = 0, color = "blue", linetype = "dashed", size = 1) +
geom_hline(yintercept = 1, color = "blue", linetype = "dashed", size = 1) +
geom_point(aes(x = parameter, y = N2_eql), position = position_jitter(width = 0.1),
color = "grey50", alpha = 0.75) +
stat_summary(aes(x = parameter, y = N2_eql), fun.y = mean,
fun.ymin = function(x) mean(x) - sd(x),
fun.ymax = function(x) mean(x) + sd(x),
geom = "pointrange", color = "red") +
labs(x = "Focal parameter", y = expression(Relative~abundance~of~N[2]),
title = glue::glue("Focal parameters: +{pchange_focal_par}% \n Non-focal parameters: ±{pchange_nonfocal_par}%")) +
scale_x_discrete(labels = x_labels[pars_order$No]) +
scale_y_continuous(expand = c(0.25, 0)) +
theme_classic() +
theme(axis.line.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text = element_text(color = "black", size = 14),
plot.title = element_text(hjust = 0.5, size = 16),
axis.title.x = element_text(size = 15, margin = margin(t = 10)),
axis.title.y = element_text(size = 15, margin = margin(r = 8)))
}
plot_sim_two_pars_relabd(dat = BH_sens_40_20,
pchange_focal_par = 40,
pchange_nonfocal_par = 20)
plot_sim_two_pars_relabd <- function(dat, pchange_focal_par, pchange_nonfocal_par){
# Arrange the parameters by the average N2 abundance of the simulations
pars_order <- dat$pars_sens_df %>%
group_by(parameter) %>%
summarise(mean = mean(N2_eql)) %>%
mutate(No = 1:10) %>%
arrange(desc(mean))
# Reorder the parameter levels for plotting
dat$pars_sens_df <- dat$pars_sens_df %>%
mutate(parameter = factor(parameter, level = pars_order$parameter, ordered = T))
# A vector of x-axis labels
x_labels <- c(expression(italic(alpha[21]~+~alpha[22])),
expression(italic(g~+~alpha[21])),
expression(italic(g~+~alpha[22])),
expression(italic(g~+~lambda)),
expression(italic(g~+~s)),
expression(italic(lambda~+~alpha[21])),
expression(italic(lambda~+~alpha[22])),
expression(italic(s~+~alpha[21])),
expression(italic(s~+~alpha[22])),
expression(italic(s~+~lambda)))
# Plot
ggplot(data = dat$pars_sens_df) +
geom_hline(yintercept = dat$N2_equl_default, color = "grey60", linetype = "dashed", size = 1) +
geom_hline(yintercept = 0, color = "blue", linetype = "dashed", size = 1) +
geom_hline(yintercept = 1, color = "blue", linetype = "dashed", size = 1) +
geom_point(aes(x = parameter, y = N2_eql), position = position_jitter(width = 0.1),
color = "grey50", alpha = 0.75) +
stat_summary(aes(x = parameter, y = N2_eql), fun.y = mean,
fun.ymin = function(x) mean(x) - sd(x),
fun.ymax = function(x) mean(x) + sd(x),
geom = "pointrange", color = "red") +
labs(x = "Focal parameter", y = expression(Relative~abundance~of~N[2]),
title = glue::glue("Focal parameters: +{pchange_focal_par}% \n Non-focal parameters: ±{pchange_nonfocal_par}%")) +
scale_x_discrete(labels = x_labels[pars_order$No]) +
scale_y_continuous(expand = c(0.25, 0), breaks = c(0, 0.4, 0.8)) +
theme_classic() +
theme(axis.line.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text = element_text(color = "black", size = 14),
plot.title = element_text(hjust = 0.5, size = 16),
axis.title.x = element_text(size = 15, margin = margin(t = 10)),
axis.title.y = element_text(size = 15, margin = margin(r = 8)))
}
### Visualize the simulation results
BH_sens_20_5 <- BH_sensitivity_two_pars_relabd(pchange_focal_par = 20,
pchange_nonfocal_par = 5,
n_generation = 100,
n_sim = 100)
BH_sens_40_5 <- BH_sensitivity_two_pars_relabd(pchange_focal_par = 40,
pchange_nonfocal_par = 5,
n_generation = 100,
n_sim = 100)
BH_sens_20_10 <- BH_sensitivity_two_pars_relabd(pchange_focal_par = 20,
pchange_nonfocal_par = 10,
n_generation = 100,
n_sim = 100)
BH_sens_40_20 <- BH_sensitivity_two_pars_relabd(pchange_focal_par = 40,
pchange_nonfocal_par = 20,
n_generation = 100,
n_sim = 100)
plot_sim_two_pars_relabd(dat = BH_sens_20_5,
pchange_focal_par = 20,
pchange_nonfocal_par = 5)
ggsave("./Outputs/two_pars_sens_plot_20_5_relabd.tiff", width = 10, height = 5, dpi = 600, device = "tiff")
plot_sim_two_pars_relabd(dat = BH_sens_40_5,
pchange_focal_par = 40,
pchange_nonfocal_par = 5)
ggsave("./Outputs/two_pars_sens_plot_40_5_relabd.tiff", width = 10, height = 5, dpi = 600, device = "tiff")
plot_sim_two_pars_relabd(dat = BH_sens_20_10,
pchange_focal_par = 20,
pchange_nonfocal_par = 10)
ggsave("./Outputs/two_pars_sens_plot_20_10_relabd.tiff", width = 10, height = 5, dpi = 600, device = "tiff")
plot_sim_two_pars_relabd(dat = BH_sens_40_20,
pchange_focal_par = 40,
pchange_nonfocal_par = 20)
ggsave("./Outputs/two_pars_sens_plot_40_20_relabd.tiff", width = 10, height = 5, dpi = 600, device = "tiff")
